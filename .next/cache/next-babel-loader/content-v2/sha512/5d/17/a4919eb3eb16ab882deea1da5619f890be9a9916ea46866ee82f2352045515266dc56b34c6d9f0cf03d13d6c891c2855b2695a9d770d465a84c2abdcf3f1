{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Programming Main\\\\Code\\\\Courses\\\\Nextjs\\\\23-onwards-to-a-bigger-project-starting-project-modue-23\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst SingleMeetup = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.image,\n    title: props.title,\n    address: props.address,\n    description: props.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://Lodenn:Malawe8888@cluster0.ixjqb.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const {\n    meetupId\n  } = context.params;\n  const client = await MongoClient.connect(\"mongodb+srv://Lodenn:Malawe8888@cluster0.ixjqb.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const singleMeetup = meetupsCollection.find({\n    _id: meetupId\n  });\n  console.log(meetupId);\n  client.close();\n  return {\n    props: {\n      id: meetupId,\n      image: singleMeetup.image,\n      title: singleMeetup.title,\n      address: singleMeetup.address,\n      description: singleMeetup.description\n    }\n  };\n}\nexport default SingleMeetup;","map":{"version":3,"sources":["D:/Programming Main/Code/Courses/Nextjs/23-onwards-to-a-bigger-project-starting-project-modue-23/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","SingleMeetup","props","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","singleMeetup","console","log","id"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,KADf;AAEE,IAAA,KAAK,EAAED,KAAK,CAACE,KAFf;AAGE,IAAA,OAAO,EAAEF,KAAK,CAACG,OAHjB;AAIE,IAAA,WAAW,EAAEH,KAAK,CAACI;AAJrB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,gGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAM;AAAEH,IAAAA;AAAF,MAAeG,OAAO,CAACJ,MAA7B;AAEA,QAAMd,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,gGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,YAAY,GAAGhB,iBAAiB,CAACG,IAAlB,CAAuB;AAAEC,IAAAA,GAAG,EAAEQ;AAAP,GAAvB,CAArB;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AAEAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLf,IAAAA,KAAK,EAAE;AACL4B,MAAAA,EAAE,EAAEP,QADC;AAELpB,MAAAA,KAAK,EAAEwB,YAAY,CAACxB,KAFf;AAGLC,MAAAA,KAAK,EAAEuB,YAAY,CAACvB,KAHf;AAILC,MAAAA,OAAO,EAAEsB,YAAY,CAACtB,OAJjB;AAKLC,MAAAA,WAAW,EAAEqB,YAAY,CAACrB;AALrB;AADF,GAAP;AASD;AAED,eAAeL,YAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nconst SingleMeetup = (props) => {\r\n  return (\r\n    <MeetupDetail\r\n      image={props.image}\r\n      title={props.title}\r\n      address={props.address}\r\n      description={props.description}\r\n    />\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://Lodenn:Malawe8888@cluster0.ixjqb.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n  client.close();\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const { meetupId } = context.params;\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://Lodenn:Malawe8888@cluster0.ixjqb.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const singleMeetup = meetupsCollection.find({ _id: meetupId });\r\n\r\n  console.log(meetupId);\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      id: meetupId,\r\n      image: singleMeetup.image,\r\n      title: singleMeetup.title,\r\n      address: singleMeetup.address,\r\n      description: singleMeetup.description,\r\n    },\r\n  };\r\n}\r\n\r\nexport default SingleMeetup;\r\n"]},"metadata":{},"sourceType":"module"}